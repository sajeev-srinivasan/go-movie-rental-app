// Code generated by mockery v2.40.1. DO NOT EDIT.

package mocks

import (
	model "movie-rental-app/internal/app/model"

	mock "github.com/stretchr/testify/mock"
)

// MovieRepository is an autogenerated mock type for the MovieRepository type
type MovieRepository struct {
	mock.Mock
}

// GetAllMovies provides a mock function with given fields:
func (_m *MovieRepository) GetAllMovies() ([]model.Movie, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllMovies")
	}

	var r0 []model.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]model.Movie, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []model.Movie); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMovie provides a mock function with given fields: id
func (_m *MovieRepository) GetMovie(id string) (model.Movie, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetMovie")
	}

	var r0 model.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.Movie, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) model.Movie); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Movie)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMovies provides a mock function with given fields: year, genre, actors
func (_m *MovieRepository) GetMovies(year string, genre string, actors string) ([]model.Movie, error) {
	ret := _m.Called(year, genre, actors)

	if len(ret) == 0 {
		panic("no return value specified for GetMovies")
	}

	var r0 []model.Movie
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string) ([]model.Movie, error)); ok {
		return rf(year, genre, actors)
	}
	if rf, ok := ret.Get(0).(func(string, string, string) []model.Movie); ok {
		r0 = rf(year, genre, actors)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Movie)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(year, genre, actors)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMovieRepository creates a new instance of MovieRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMovieRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MovieRepository {
	mock := &MovieRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
